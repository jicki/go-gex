// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package accountservice

import (
	"context"

	"github.com/luxun9527/gex/app/account/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddUserAssetReq      = pb.AddUserAssetReq
	Asset                = pb.Asset
	DeductUserAssetReq   = pb.DeductUserAssetReq
	Empty                = pb.Empty
	FreezeUserAssetReq   = pb.FreezeUserAssetReq
	GetUserAssetListReq  = pb.GetUserAssetListReq
	GetUserAssetListResp = pb.GetUserAssetListResp
	GetUserAssetReq      = pb.GetUserAssetReq
	GetUserAssetResp     = pb.GetUserAssetResp
	LoginOutReq          = pb.LoginOutReq
	LoginReq             = pb.LoginReq
	LoginResp            = pb.LoginResp
	RegisterReq          = pb.RegisterReq
	UnFreezeUserAssetReq = pb.UnFreezeUserAssetReq
	ValidateTokenReq     = pb.ValidateTokenReq
	ValidateTokenResp    = pb.ValidateTokenResp

	AccountService interface {
		// 获取用户指定币种的资产。
		GetUserAssetByCoin(ctx context.Context, in *GetUserAssetReq, opts ...grpc.CallOption) (*GetUserAssetResp, error)
		// 获取用户所有币种资产。
		GetUserAssetList(ctx context.Context, in *GetUserAssetListReq, opts ...grpc.CallOption) (*GetUserAssetListResp, error)
		// 冻结用户资产。
		FreezeUserAsset(ctx context.Context, in *FreezeUserAssetReq, opts ...grpc.CallOption) (*Empty, error)
		// 解冻用户资产
		UnFreezeUserAsset(ctx context.Context, in *FreezeUserAssetReq, opts ...grpc.CallOption) (*Empty, error)
		// 扣减用户资产
		DeductUserAsset(ctx context.Context, in *DeductUserAssetReq, opts ...grpc.CallOption) (*Empty, error)
		// 增加用户资产
		AddUserAsset(ctx context.Context, in *AddUserAssetReq, opts ...grpc.CallOption) (*Empty, error)
		// 注册
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*Empty, error)
		// 登录
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 登出
		LoginOut(ctx context.Context, in *LoginOutReq, opts ...grpc.CallOption) (*Empty, error)
		// 验证token是否有效。
		ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error)
	}

	defaultAccountService struct {
		cli zrpc.Client
	}
)

func NewAccountService(cli zrpc.Client) AccountService {
	return &defaultAccountService{
		cli: cli,
	}
}

// 获取用户指定币种的资产。
func (m *defaultAccountService) GetUserAssetByCoin(ctx context.Context, in *GetUserAssetReq, opts ...grpc.CallOption) (*GetUserAssetResp, error) {
	client := pb.NewAccountServiceClient(m.cli.Conn())
	return client.GetUserAssetByCoin(ctx, in, opts...)
}

// 获取用户所有币种资产。
func (m *defaultAccountService) GetUserAssetList(ctx context.Context, in *GetUserAssetListReq, opts ...grpc.CallOption) (*GetUserAssetListResp, error) {
	client := pb.NewAccountServiceClient(m.cli.Conn())
	return client.GetUserAssetList(ctx, in, opts...)
}

// 冻结用户资产。
func (m *defaultAccountService) FreezeUserAsset(ctx context.Context, in *FreezeUserAssetReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewAccountServiceClient(m.cli.Conn())
	return client.FreezeUserAsset(ctx, in, opts...)
}

// 解冻用户资产
func (m *defaultAccountService) UnFreezeUserAsset(ctx context.Context, in *FreezeUserAssetReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewAccountServiceClient(m.cli.Conn())
	return client.UnFreezeUserAsset(ctx, in, opts...)
}

// 扣减用户资产
func (m *defaultAccountService) DeductUserAsset(ctx context.Context, in *DeductUserAssetReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewAccountServiceClient(m.cli.Conn())
	return client.DeductUserAsset(ctx, in, opts...)
}

// 增加用户资产
func (m *defaultAccountService) AddUserAsset(ctx context.Context, in *AddUserAssetReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewAccountServiceClient(m.cli.Conn())
	return client.AddUserAsset(ctx, in, opts...)
}

// 注册
func (m *defaultAccountService) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewAccountServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 登录
func (m *defaultAccountService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewAccountServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 登出
func (m *defaultAccountService) LoginOut(ctx context.Context, in *LoginOutReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewAccountServiceClient(m.cli.Conn())
	return client.LoginOut(ctx, in, opts...)
}

// 验证token是否有效。
func (m *defaultAccountService) ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error) {
	client := pb.NewAccountServiceClient(m.cli.Conn())
	return client.ValidateToken(ctx, in, opts...)
}
