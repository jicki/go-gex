// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package server

import (
	"context"

	"github.com/luxun9527/gex/app/account/rpc/internal/logic"
	"github.com/luxun9527/gex/app/account/rpc/internal/svc"
	"github.com/luxun9527/gex/app/account/rpc/pb"
)

type AccountServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedAccountServiceServer
}

func NewAccountServiceServer(svcCtx *svc.ServiceContext) *AccountServiceServer {
	return &AccountServiceServer{
		svcCtx: svcCtx,
	}
}

// 获取用户指定币种的资产。
func (s *AccountServiceServer) GetUserAssetByCoin(ctx context.Context, in *pb.GetUserAssetReq) (*pb.GetUserAssetResp, error) {
	l := logic.NewGetUserAssetByCoinLogic(ctx, s.svcCtx)
	return l.GetUserAssetByCoin(in)
}

// 获取用户所有币种资产。
func (s *AccountServiceServer) GetUserAssetList(ctx context.Context, in *pb.GetUserAssetListReq) (*pb.GetUserAssetListResp, error) {
	l := logic.NewGetUserAssetListLogic(ctx, s.svcCtx)
	return l.GetUserAssetList(in)
}

// 冻结用户资产。
func (s *AccountServiceServer) FreezeUserAsset(ctx context.Context, in *pb.FreezeUserAssetReq) (*pb.Empty, error) {
	l := logic.NewFreezeUserAssetLogic(ctx, s.svcCtx)
	return l.FreezeUserAsset(in)
}

// 解冻用户资产
func (s *AccountServiceServer) UnFreezeUserAsset(ctx context.Context, in *pb.FreezeUserAssetReq) (*pb.Empty, error) {
	l := logic.NewUnFreezeUserAssetLogic(ctx, s.svcCtx)
	return l.UnFreezeUserAsset(in)
}

// 扣减用户资产
func (s *AccountServiceServer) DeductUserAsset(ctx context.Context, in *pb.DeductUserAssetReq) (*pb.Empty, error) {
	l := logic.NewDeductUserAssetLogic(ctx, s.svcCtx)
	return l.DeductUserAsset(in)
}

// 增加用户资产
func (s *AccountServiceServer) AddUserAsset(ctx context.Context, in *pb.AddUserAssetReq) (*pb.Empty, error) {
	l := logic.NewAddUserAssetLogic(ctx, s.svcCtx)
	return l.AddUserAsset(in)
}

// 注册
func (s *AccountServiceServer) Register(ctx context.Context, in *pb.RegisterReq) (*pb.Empty, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 登录
func (s *AccountServiceServer) Login(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// 登出
func (s *AccountServiceServer) LoginOut(ctx context.Context, in *pb.LoginOutReq) (*pb.Empty, error) {
	l := logic.NewLoginOutLogic(ctx, s.svcCtx)
	return l.LoginOut(in)
}

// 验证token是否有效。
func (s *AccountServiceServer) ValidateToken(ctx context.Context, in *pb.ValidateTokenReq) (*pb.ValidateTokenResp, error) {
	l := logic.NewValidateTokenLogic(ctx, s.svcCtx)
	return l.ValidateToken(in)
}
