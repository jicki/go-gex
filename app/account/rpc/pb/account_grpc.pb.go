// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: app/account/rpc/pb/account.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountService_GetUserAssetByCoin_FullMethodName = "/account.AccountService/GetUserAssetByCoin"
	AccountService_GetUserAssetList_FullMethodName   = "/account.AccountService/GetUserAssetList"
	AccountService_FreezeUserAsset_FullMethodName    = "/account.AccountService/FreezeUserAsset"
	AccountService_UnFreezeUserAsset_FullMethodName  = "/account.AccountService/UnFreezeUserAsset"
	AccountService_DeductUserAsset_FullMethodName    = "/account.AccountService/DeductUserAsset"
	AccountService_AddUserAsset_FullMethodName       = "/account.AccountService/AddUserAsset"
	AccountService_Register_FullMethodName           = "/account.AccountService/Register"
	AccountService_Login_FullMethodName              = "/account.AccountService/Login"
	AccountService_LoginOut_FullMethodName           = "/account.AccountService/LoginOut"
	AccountService_ValidateToken_FullMethodName      = "/account.AccountService/ValidateToken"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	// 获取用户指定币种的资产。
	GetUserAssetByCoin(ctx context.Context, in *GetUserAssetReq, opts ...grpc.CallOption) (*GetUserAssetResp, error)
	// 获取用户所有币种资产。
	GetUserAssetList(ctx context.Context, in *GetUserAssetListReq, opts ...grpc.CallOption) (*GetUserAssetListResp, error)
	// 冻结用户资产。
	FreezeUserAsset(ctx context.Context, in *FreezeUserAssetReq, opts ...grpc.CallOption) (*Empty, error)
	// 解冻用户资产
	UnFreezeUserAsset(ctx context.Context, in *FreezeUserAssetReq, opts ...grpc.CallOption) (*Empty, error)
	// 扣减用户资产
	DeductUserAsset(ctx context.Context, in *DeductUserAssetReq, opts ...grpc.CallOption) (*Empty, error)
	// 增加用户资产
	AddUserAsset(ctx context.Context, in *AddUserAssetReq, opts ...grpc.CallOption) (*Empty, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*Empty, error)
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 登出
	LoginOut(ctx context.Context, in *LoginOutReq, opts ...grpc.CallOption) (*Empty, error)
	// 验证token是否有效。
	ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetUserAssetByCoin(ctx context.Context, in *GetUserAssetReq, opts ...grpc.CallOption) (*GetUserAssetResp, error) {
	out := new(GetUserAssetResp)
	err := c.cc.Invoke(ctx, AccountService_GetUserAssetByCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetUserAssetList(ctx context.Context, in *GetUserAssetListReq, opts ...grpc.CallOption) (*GetUserAssetListResp, error) {
	out := new(GetUserAssetListResp)
	err := c.cc.Invoke(ctx, AccountService_GetUserAssetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) FreezeUserAsset(ctx context.Context, in *FreezeUserAssetReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_FreezeUserAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UnFreezeUserAsset(ctx context.Context, in *FreezeUserAssetReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_UnFreezeUserAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeductUserAsset(ctx context.Context, in *DeductUserAssetReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_DeductUserAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AddUserAsset(ctx context.Context, in *AddUserAssetReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_AddUserAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AccountService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) LoginOut(ctx context.Context, in *LoginOutReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_LoginOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error) {
	out := new(ValidateTokenResp)
	err := c.cc.Invoke(ctx, AccountService_ValidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	// 获取用户指定币种的资产。
	GetUserAssetByCoin(context.Context, *GetUserAssetReq) (*GetUserAssetResp, error)
	// 获取用户所有币种资产。
	GetUserAssetList(context.Context, *GetUserAssetListReq) (*GetUserAssetListResp, error)
	// 冻结用户资产。
	FreezeUserAsset(context.Context, *FreezeUserAssetReq) (*Empty, error)
	// 解冻用户资产
	UnFreezeUserAsset(context.Context, *FreezeUserAssetReq) (*Empty, error)
	// 扣减用户资产
	DeductUserAsset(context.Context, *DeductUserAssetReq) (*Empty, error)
	// 增加用户资产
	AddUserAsset(context.Context, *AddUserAssetReq) (*Empty, error)
	// 注册
	Register(context.Context, *RegisterReq) (*Empty, error)
	// 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 登出
	LoginOut(context.Context, *LoginOutReq) (*Empty, error)
	// 验证token是否有效。
	ValidateToken(context.Context, *ValidateTokenReq) (*ValidateTokenResp, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) GetUserAssetByCoin(context.Context, *GetUserAssetReq) (*GetUserAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAssetByCoin not implemented")
}
func (UnimplementedAccountServiceServer) GetUserAssetList(context.Context, *GetUserAssetListReq) (*GetUserAssetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAssetList not implemented")
}
func (UnimplementedAccountServiceServer) FreezeUserAsset(context.Context, *FreezeUserAssetReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeUserAsset not implemented")
}
func (UnimplementedAccountServiceServer) UnFreezeUserAsset(context.Context, *FreezeUserAssetReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFreezeUserAsset not implemented")
}
func (UnimplementedAccountServiceServer) DeductUserAsset(context.Context, *DeductUserAssetReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductUserAsset not implemented")
}
func (UnimplementedAccountServiceServer) AddUserAsset(context.Context, *AddUserAssetReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserAsset not implemented")
}
func (UnimplementedAccountServiceServer) Register(context.Context, *RegisterReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAccountServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAccountServiceServer) LoginOut(context.Context, *LoginOutReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginOut not implemented")
}
func (UnimplementedAccountServiceServer) ValidateToken(context.Context, *ValidateTokenReq) (*ValidateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_GetUserAssetByCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetUserAssetByCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetUserAssetByCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetUserAssetByCoin(ctx, req.(*GetUserAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetUserAssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAssetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetUserAssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetUserAssetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetUserAssetList(ctx, req.(*GetUserAssetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_FreezeUserAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeUserAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).FreezeUserAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_FreezeUserAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).FreezeUserAsset(ctx, req.(*FreezeUserAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UnFreezeUserAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeUserAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UnFreezeUserAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UnFreezeUserAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UnFreezeUserAsset(ctx, req.(*FreezeUserAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeductUserAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeductUserAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeductUserAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_DeductUserAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeductUserAsset(ctx, req.(*DeductUserAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AddUserAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AddUserAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AddUserAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AddUserAsset(ctx, req.(*AddUserAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_LoginOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LoginOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_LoginOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LoginOut(ctx, req.(*LoginOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ValidateToken(ctx, req.(*ValidateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserAssetByCoin",
			Handler:    _AccountService_GetUserAssetByCoin_Handler,
		},
		{
			MethodName: "GetUserAssetList",
			Handler:    _AccountService_GetUserAssetList_Handler,
		},
		{
			MethodName: "FreezeUserAsset",
			Handler:    _AccountService_FreezeUserAsset_Handler,
		},
		{
			MethodName: "UnFreezeUserAsset",
			Handler:    _AccountService_UnFreezeUserAsset_Handler,
		},
		{
			MethodName: "DeductUserAsset",
			Handler:    _AccountService_DeductUserAsset_Handler,
		},
		{
			MethodName: "AddUserAsset",
			Handler:    _AccountService_AddUserAsset_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AccountService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AccountService_Login_Handler,
		},
		{
			MethodName: "LoginOut",
			Handler:    _AccountService_LoginOut_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _AccountService_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/account/rpc/pb/account.proto",
}
