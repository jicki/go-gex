// Code generated by goctl. DO NOT EDIT.
// Source: match.proto

package matchservice

import (
	"context"

	"gex/app/match/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetDepthReq           = pb.GetDepthReq
	GetDepthResp          = pb.GetDepthResp
	GetDepthResp_Position = pb.GetDepthResp_Position
	GetTickReq            = pb.GetTickReq
	GetTickResp           = pb.GetTickResp
	GetTickResp_Tick      = pb.GetTickResp_Tick
	GetTickerReq          = pb.GetTickerReq
	GetTickerResp         = pb.GetTickerResp
	GetTickerResp_Ticker  = pb.GetTickerResp_Ticker

	MatchService interface {
		// 获取深度
		GetDepth(ctx context.Context, in *GetDepthReq, opts ...grpc.CallOption) (*GetDepthResp, error)
		// 获取tick实时成交
		GetTick(ctx context.Context, in *GetTickReq, opts ...grpc.CallOption) (*GetTickResp, error)
		// 获取ticker
		GetTicker(ctx context.Context, in *GetTickerReq, opts ...grpc.CallOption) (*GetTickerResp, error)
	}

	defaultMatchService struct {
		cli zrpc.Client
	}
)

func NewMatchService(cli zrpc.Client) MatchService {
	return &defaultMatchService{
		cli: cli,
	}
}

// 获取深度
func (m *defaultMatchService) GetDepth(ctx context.Context, in *GetDepthReq, opts ...grpc.CallOption) (*GetDepthResp, error) {
	client := pb.NewMatchServiceClient(m.cli.Conn())
	return client.GetDepth(ctx, in, opts...)
}

// 获取tick实时成交
func (m *defaultMatchService) GetTick(ctx context.Context, in *GetTickReq, opts ...grpc.CallOption) (*GetTickResp, error) {
	client := pb.NewMatchServiceClient(m.cli.Conn())
	return client.GetTick(ctx, in, opts...)
}

// 获取ticker
func (m *defaultMatchService) GetTicker(ctx context.Context, in *GetTickerReq, opts ...grpc.CallOption) (*GetTickerResp, error) {
	client := pb.NewMatchServiceClient(m.cli.Conn())
	return client.GetTicker(ctx, in, opts...)
}
