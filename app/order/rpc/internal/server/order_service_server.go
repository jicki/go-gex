// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package server

import (
	"context"

	"github.com/luxun9527/gex/app/order/rpc/internal/logic"
	"github.com/luxun9527/gex/app/order/rpc/internal/svc"
	"github.com/luxun9527/gex/app/order/rpc/pb"
)

type OrderServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedOrderServiceServer
}

func NewOrderServiceServer(svcCtx *svc.ServiceContext) *OrderServiceServer {
	return &OrderServiceServer{
		svcCtx: svcCtx,
	}
}

// 下单
func (s *OrderServiceServer) Order(ctx context.Context, in *pb.CreateOrderReq) (*pb.OrderEmpty, error) {
	l := logic.NewOrderLogic(ctx, s.svcCtx)
	return l.Order(in)
}

// 创建订单,下单有分布式事务要处理分为两个接口
func (s *OrderServiceServer) CreateOrder(ctx context.Context, in *pb.CreateOrderReq) (*pb.OrderEmpty, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

// 获取用户订单列表
func (s *OrderServiceServer) GetOrderList(ctx context.Context, in *pb.GetOrderListByUserReq) (*pb.GetOrderListByUserResp, error) {
	l := logic.NewGetOrderListLogic(ctx, s.svcCtx)
	return l.GetOrderList(in)
}

// 取消订单
func (s *OrderServiceServer) CancelOrder(ctx context.Context, in *pb.CancelOrderReq) (*pb.OrderEmpty, error) {
	l := logic.NewCancelOrderLogic(ctx, s.svcCtx)
	return l.CancelOrder(in)
}

// 下单补偿
func (s *OrderServiceServer) CreateOrderRevert(ctx context.Context, in *pb.CreateOrderReq) (*pb.OrderEmpty, error) {
	l := logic.NewCreateOrderRevertLogic(ctx, s.svcCtx)
	return l.CreateOrderRevert(in)
}

// 获取所有订单状态为未成交或部分成交的订单
func (s *OrderServiceServer) GetOrderAllPendingOrder(in *pb.OrderEmpty, stream pb.OrderService_GetOrderAllPendingOrderServer) error {
	l := logic.NewGetOrderAllPendingOrderLogic(stream.Context(), s.svcCtx)
	return l.GetOrderAllPendingOrder(in, stream)
}
