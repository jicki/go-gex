// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: app/order/rpc/pb/order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_Order_FullMethodName                   = "/order.OrderService/Order"
	OrderService_CreateOrder_FullMethodName             = "/order.OrderService/CreateOrder"
	OrderService_GetOrderList_FullMethodName            = "/order.OrderService/GetOrderList"
	OrderService_CancelOrder_FullMethodName             = "/order.OrderService/CancelOrder"
	OrderService_CreateOrderRevert_FullMethodName       = "/order.OrderService/CreateOrderRevert"
	OrderService_GetOrderAllPendingOrder_FullMethodName = "/order.OrderService/GetOrderAllPendingOrder"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// 下单
	Order(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*OrderEmpty, error)
	// 创建订单,下单有分布式事务要处理分为两个接口
	CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*OrderEmpty, error)
	// 获取用户订单列表
	GetOrderList(ctx context.Context, in *GetOrderListByUserReq, opts ...grpc.CallOption) (*GetOrderListByUserResp, error)
	// 取消订单
	CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*OrderEmpty, error)
	// 下单补偿
	CreateOrderRevert(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*OrderEmpty, error)
	// 获取所有订单状态为未成交或部分成交的订单
	GetOrderAllPendingOrder(ctx context.Context, in *OrderEmpty, opts ...grpc.CallOption) (OrderService_GetOrderAllPendingOrderClient, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) Order(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*OrderEmpty, error) {
	out := new(OrderEmpty)
	err := c.cc.Invoke(ctx, OrderService_Order_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*OrderEmpty, error) {
	out := new(OrderEmpty)
	err := c.cc.Invoke(ctx, OrderService_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderList(ctx context.Context, in *GetOrderListByUserReq, opts ...grpc.CallOption) (*GetOrderListByUserResp, error) {
	out := new(GetOrderListByUserResp)
	err := c.cc.Invoke(ctx, OrderService_GetOrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*OrderEmpty, error) {
	out := new(OrderEmpty)
	err := c.cc.Invoke(ctx, OrderService_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateOrderRevert(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*OrderEmpty, error) {
	out := new(OrderEmpty)
	err := c.cc.Invoke(ctx, OrderService_CreateOrderRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderAllPendingOrder(ctx context.Context, in *OrderEmpty, opts ...grpc.CallOption) (OrderService_GetOrderAllPendingOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], OrderService_GetOrderAllPendingOrder_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetOrderAllPendingOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetOrderAllPendingOrderClient interface {
	Recv() (*GetOrderAllPendingOrderResp, error)
	grpc.ClientStream
}

type orderServiceGetOrderAllPendingOrderClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetOrderAllPendingOrderClient) Recv() (*GetOrderAllPendingOrderResp, error) {
	m := new(GetOrderAllPendingOrderResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	// 下单
	Order(context.Context, *CreateOrderReq) (*OrderEmpty, error)
	// 创建订单,下单有分布式事务要处理分为两个接口
	CreateOrder(context.Context, *CreateOrderReq) (*OrderEmpty, error)
	// 获取用户订单列表
	GetOrderList(context.Context, *GetOrderListByUserReq) (*GetOrderListByUserResp, error)
	// 取消订单
	CancelOrder(context.Context, *CancelOrderReq) (*OrderEmpty, error)
	// 下单补偿
	CreateOrderRevert(context.Context, *CreateOrderReq) (*OrderEmpty, error)
	// 获取所有订单状态为未成交或部分成交的订单
	GetOrderAllPendingOrder(*OrderEmpty, OrderService_GetOrderAllPendingOrderServer) error
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) Order(context.Context, *CreateOrderReq) (*OrderEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *CreateOrderReq) (*OrderEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderList(context.Context, *GetOrderListByUserReq) (*GetOrderListByUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderList not implemented")
}
func (UnimplementedOrderServiceServer) CancelOrder(context.Context, *CancelOrderReq) (*OrderEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderServiceServer) CreateOrderRevert(context.Context, *CreateOrderReq) (*OrderEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderRevert not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderAllPendingOrder(*OrderEmpty, OrderService_GetOrderAllPendingOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderAllPendingOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Order_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Order(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderListByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderList(ctx, req.(*GetOrderListByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrder(ctx, req.(*CancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateOrderRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrderRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrderRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrderRevert(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderAllPendingOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderEmpty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetOrderAllPendingOrder(m, &orderServiceGetOrderAllPendingOrderServer{stream})
}

type OrderService_GetOrderAllPendingOrderServer interface {
	Send(*GetOrderAllPendingOrderResp) error
	grpc.ServerStream
}

type orderServiceGetOrderAllPendingOrderServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetOrderAllPendingOrderServer) Send(m *GetOrderAllPendingOrderResp) error {
	return x.ServerStream.SendMsg(m)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Order",
			Handler:    _OrderService_Order_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderList",
			Handler:    _OrderService_GetOrderList_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderService_CancelOrder_Handler,
		},
		{
			MethodName: "CreateOrderRevert",
			Handler:    _OrderService_CreateOrderRevert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderAllPendingOrder",
			Handler:       _OrderService_GetOrderAllPendingOrder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/order/rpc/pb/order.proto",
}
