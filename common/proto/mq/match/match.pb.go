// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: mq/match/match.proto

package match

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	enum "github.com/luxun9527/gex/common/proto/enum"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operate:
	//
	//	*MatchReq_NewOrder
	//	*MatchReq_Cancel
	Operate isMatchReq_Operate `protobuf_oneof:"Operate"`
}

func (x *MatchReq) Reset() {
	*x = MatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mq_match_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchReq) ProtoMessage() {}

func (x *MatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_mq_match_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchReq.ProtoReflect.Descriptor instead.
func (*MatchReq) Descriptor() ([]byte, []int) {
	return file_mq_match_match_proto_rawDescGZIP(), []int{0}
}

func (m *MatchReq) GetOperate() isMatchReq_Operate {
	if m != nil {
		return m.Operate
	}
	return nil
}

func (x *MatchReq) GetNewOrder() *NewOrderOperate {
	if x, ok := x.GetOperate().(*MatchReq_NewOrder); ok {
		return x.NewOrder
	}
	return nil
}

func (x *MatchReq) GetCancel() *CancelOperate {
	if x, ok := x.GetOperate().(*MatchReq_Cancel); ok {
		return x.Cancel
	}
	return nil
}

type isMatchReq_Operate interface {
	isMatchReq_Operate()
}

type MatchReq_NewOrder struct {
	NewOrder *NewOrderOperate `protobuf:"bytes,1,opt,name=new_order,json=newOrder,proto3,oneof"`
}

type MatchReq_Cancel struct {
	Cancel *CancelOperate `protobuf:"bytes,2,opt,name=cancel,proto3,oneof"`
}

func (*MatchReq_NewOrder) isMatchReq_Operate() {}

func (*MatchReq_Cancel) isMatchReq_Operate() {}

type MatchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resp:
	//
	//	*MatchResp_MatchResult
	//	*MatchResp_Cancel
	Resp isMatchResp_Resp `protobuf_oneof:"Resp"`
}

func (x *MatchResp) Reset() {
	*x = MatchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mq_match_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResp) ProtoMessage() {}

func (x *MatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_mq_match_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResp.ProtoReflect.Descriptor instead.
func (*MatchResp) Descriptor() ([]byte, []int) {
	return file_mq_match_match_proto_rawDescGZIP(), []int{1}
}

func (m *MatchResp) GetResp() isMatchResp_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (x *MatchResp) GetMatchResult() *MatchResult {
	if x, ok := x.GetResp().(*MatchResp_MatchResult); ok {
		return x.MatchResult
	}
	return nil
}

func (x *MatchResp) GetCancel() *CancelResp {
	if x, ok := x.GetResp().(*MatchResp_Cancel); ok {
		return x.Cancel
	}
	return nil
}

type isMatchResp_Resp interface {
	isMatchResp_Resp()
}

type MatchResp_MatchResult struct {
	MatchResult *MatchResult `protobuf:"bytes,1,opt,name=match_result,json=matchResult,proto3,oneof"`
}

type MatchResp_Cancel struct {
	Cancel *CancelResp `protobuf:"bytes,2,opt,name=cancel,proto3,oneof"`
}

func (*MatchResp_MatchResult) isMatchResp_Resp() {}

func (*MatchResp_Cancel) isMatchResp_Resp() {}

// 下单操作
type NewOrderOperate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 订单id
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 订单序号,唯一在订单簿中如果价格相同，用这个来排序。也是订单的主键id
	SequenceId int64 `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// 用户id
	Uid int64 `protobuf:"varint,9,opt,name=uid,proto3" json:"uid,omitempty"`
	// 订单方向
	Side enum.Side `protobuf:"varint,3,opt,name=side,proto3,enum=commonEnum.Side" json:"side,omitempty"`
	// 价格
	Price string `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
	// 订单数量
	Qty string `protobuf:"bytes,4,opt,name=qty,proto3" json:"qty,omitempty"`
	// 订单金额 计价币数量
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// 订单类型
	OrderType enum.OrderType `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3,enum=commonEnum.OrderType" json:"order_type,omitempty"`
	// 交易对id
	SymbolId int32 `protobuf:"varint,8,opt,name=symbol_id,json=symbolId,proto3" json:"symbol_id,omitempty"`
	// 交易对名称
	SymbolName string `protobuf:"bytes,10,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
}

func (x *NewOrderOperate) Reset() {
	*x = NewOrderOperate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mq_match_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrderOperate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrderOperate) ProtoMessage() {}

func (x *NewOrderOperate) ProtoReflect() protoreflect.Message {
	mi := &file_mq_match_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrderOperate.ProtoReflect.Descriptor instead.
func (*NewOrderOperate) Descriptor() ([]byte, []int) {
	return file_mq_match_match_proto_rawDescGZIP(), []int{2}
}

func (x *NewOrderOperate) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *NewOrderOperate) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *NewOrderOperate) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *NewOrderOperate) GetSide() enum.Side {
	if x != nil {
		return x.Side
	}
	return enum.Side(0)
}

func (x *NewOrderOperate) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *NewOrderOperate) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *NewOrderOperate) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *NewOrderOperate) GetOrderType() enum.OrderType {
	if x != nil {
		return x.OrderType
	}
	return enum.OrderType(0)
}

func (x *NewOrderOperate) GetSymbolId() int32 {
	if x != nil {
		return x.SymbolId
	}
	return 0
}

func (x *NewOrderOperate) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

// 取消订单操作。
type CancelOperate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                          //主键id
	Price     string         `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`                                                     //价格
	Side      enum.Side      `protobuf:"varint,3,opt,name=side,proto3,enum=commonEnum.Side" json:"side,omitempty"`                                 //方向
	OrderType enum.OrderType `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3,enum=commonEnum.OrderType" json:"order_type,omitempty"` //订单类型
}

func (x *CancelOperate) Reset() {
	*x = CancelOperate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mq_match_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOperate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOperate) ProtoMessage() {}

func (x *CancelOperate) ProtoReflect() protoreflect.Message {
	mi := &file_mq_match_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOperate.ProtoReflect.Descriptor instead.
func (*CancelOperate) Descriptor() ([]byte, []int) {
	return file_mq_match_match_proto_rawDescGZIP(), []int{3}
}

func (x *CancelOperate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CancelOperate) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *CancelOperate) GetSide() enum.Side {
	if x != nil {
		return x.Side
	}
	return enum.Side(0)
}

func (x *CancelOperate) GetOrderType() enum.OrderType {
	if x != nil {
		return x.OrderType
	}
	return enum.OrderType(0)
}

type OrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键id
	Id int64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	// 用户id
	Uid int64 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	// 订单id
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 已经成交数量
	FilledQty string `protobuf:"bytes,2,opt,name=filled_qty,json=filledQty,proto3" json:"filled_qty,omitempty"`
	// 未成交的数量
	UnFilledQty string `protobuf:"bytes,7,opt,name=un_filled_qty,json=unFilledQty,proto3" json:"un_filled_qty,omitempty"`
	// 已经成交金额
	FilledAmount string `protobuf:"bytes,3,opt,name=filled_amount,json=filledAmount,proto3" json:"filled_amount,omitempty"`
	// 未成交的金额
	UnFilledAmount string `protobuf:"bytes,4,opt,name=un_filled_amount,json=unFilledAmount,proto3" json:"un_filled_amount,omitempty"`
	// 订单状态
	OrderStatus enum.OrderStatus `protobuf:"varint,5,opt,name=order_status,json=orderStatus,proto3,enum=commonEnum.OrderStatus" json:"order_status,omitempty"`
	// 解冻金额
	UnFrozenAmount string `protobuf:"bytes,9,opt,name=un_frozen_amount,json=unFrozenAmount,proto3" json:"un_frozen_amount,omitempty"`
}

func (x *OrderResp) Reset() {
	*x = OrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mq_match_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResp) ProtoMessage() {}

func (x *OrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_mq_match_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResp.ProtoReflect.Descriptor instead.
func (*OrderResp) Descriptor() ([]byte, []int) {
	return file_mq_match_match_proto_rawDescGZIP(), []int{4}
}

func (x *OrderResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OrderResp) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderResp) GetFilledQty() string {
	if x != nil {
		return x.FilledQty
	}
	return ""
}

func (x *OrderResp) GetUnFilledQty() string {
	if x != nil {
		return x.UnFilledQty
	}
	return ""
}

func (x *OrderResp) GetFilledAmount() string {
	if x != nil {
		return x.FilledAmount
	}
	return ""
}

func (x *OrderResp) GetUnFilledAmount() string {
	if x != nil {
		return x.UnFilledAmount
	}
	return ""
}

func (x *OrderResp) GetOrderStatus() enum.OrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return enum.OrderStatus(0)
}

func (x *OrderResp) GetUnFrozenAmount() string {
	if x != nil {
		return x.UnFrozenAmount
	}
	return ""
}

// MatchResp 撮合结果
type MatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 交易对id
	SymbolId int32 `protobuf:"varint,8,opt,name=symbol_id,json=symbolId,proto3" json:"symbol_id,omitempty"`
	// 交易对id
	SymbolName string `protobuf:"bytes,9,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	// 基础币id
	BaseCoinId int32 `protobuf:"varint,21,opt,name=base_coin_id,json=baseCoinId,proto3" json:"base_coin_id,omitempty"`
	// 基价币id
	QuoteCoinId int32 `protobuf:"varint,20,opt,name=quote_coin_id,json=quoteCoinId,proto3" json:"quote_coin_id,omitempty"`
	// 撮合id
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	// taker是否是买
	TakerIsBuy    bool                         `protobuf:"varint,22,opt,name=taker_is_buy,json=takerIsBuy,proto3" json:"taker_is_buy,omitempty"`
	MatchedRecord []*MatchResult_MatchedRecord `protobuf:"bytes,2,rep,name=matched_record,json=matchedRecord,proto3" json:"matched_record,omitempty"`
	// 开始价格
	BeginPrice string `protobuf:"bytes,3,opt,name=begin_price,json=beginPrice,proto3" json:"begin_price,omitempty"`
	// 结束价格
	EndPrice string `protobuf:"bytes,4,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	// 撮合时间
	MatchTime int64 `protobuf:"varint,6,opt,name=match_time,json=matchTime,proto3" json:"match_time,omitempty"`
	// 数量
	Qty string `protobuf:"bytes,7,opt,name=qty,proto3" json:"qty,omitempty"`
	// 金额
	Amount string `protobuf:"bytes,11,opt,name=amount,proto3" json:"amount,omitempty"`
	// 最高价
	HighPrice string `protobuf:"bytes,12,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	// 最低价
	LowPrice string `protobuf:"bytes,10,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
}

func (x *MatchResult) Reset() {
	*x = MatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mq_match_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResult) ProtoMessage() {}

func (x *MatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_mq_match_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResult.ProtoReflect.Descriptor instead.
func (*MatchResult) Descriptor() ([]byte, []int) {
	return file_mq_match_match_proto_rawDescGZIP(), []int{5}
}

func (x *MatchResult) GetSymbolId() int32 {
	if x != nil {
		return x.SymbolId
	}
	return 0
}

func (x *MatchResult) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *MatchResult) GetBaseCoinId() int32 {
	if x != nil {
		return x.BaseCoinId
	}
	return 0
}

func (x *MatchResult) GetQuoteCoinId() int32 {
	if x != nil {
		return x.QuoteCoinId
	}
	return 0
}

func (x *MatchResult) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchResult) GetTakerIsBuy() bool {
	if x != nil {
		return x.TakerIsBuy
	}
	return false
}

func (x *MatchResult) GetMatchedRecord() []*MatchResult_MatchedRecord {
	if x != nil {
		return x.MatchedRecord
	}
	return nil
}

func (x *MatchResult) GetBeginPrice() string {
	if x != nil {
		return x.BeginPrice
	}
	return ""
}

func (x *MatchResult) GetEndPrice() string {
	if x != nil {
		return x.EndPrice
	}
	return ""
}

func (x *MatchResult) GetMatchTime() int64 {
	if x != nil {
		return x.MatchTime
	}
	return 0
}

func (x *MatchResult) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *MatchResult) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MatchResult) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *MatchResult) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

// 取消订单返回，表示订单被撤单
type CancelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 订单主键id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 解冻币种id
	CoinId int32 `protobuf:"varint,2,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	// 数量
	Qty string `protobuf:"bytes,3,opt,name=qty,proto3" json:"qty,omitempty"`
	// 用户id
	Uid int64 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *CancelResp) Reset() {
	*x = CancelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mq_match_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelResp) ProtoMessage() {}

func (x *CancelResp) ProtoReflect() protoreflect.Message {
	mi := &file_mq_match_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelResp.ProtoReflect.Descriptor instead.
func (*CancelResp) Descriptor() ([]byte, []int) {
	return file_mq_match_match_proto_rawDescGZIP(), []int{6}
}

func (x *CancelResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CancelResp) GetCoinId() int32 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *CancelResp) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *CancelResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 一次撮合记录匹配记录
type MatchResult_MatchedRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 撮合匹配的数量
	Qty string `protobuf:"bytes,4,opt,name=qty,proto3" json:"qty,omitempty"`
	// 撮合价格
	Price string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	// 撮合的金额
	Amount string `protobuf:"bytes,10,opt,name=amount,proto3" json:"amount,omitempty"`
	// 本次匹配的id
	MatchSubId string `protobuf:"bytes,6,opt,name=match_sub_id,json=matchSubId,proto3" json:"match_sub_id,omitempty"`
	// taker订单
	Taker *OrderResp `protobuf:"bytes,7,opt,name=taker,proto3" json:"taker,omitempty"`
	// maker 订单
	Maker *OrderResp `protobuf:"bytes,8,opt,name=maker,proto3" json:"maker,omitempty"`
}

func (x *MatchResult_MatchedRecord) Reset() {
	*x = MatchResult_MatchedRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mq_match_match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResult_MatchedRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResult_MatchedRecord) ProtoMessage() {}

func (x *MatchResult_MatchedRecord) ProtoReflect() protoreflect.Message {
	mi := &file_mq_match_match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResult_MatchedRecord.ProtoReflect.Descriptor instead.
func (*MatchResult_MatchedRecord) Descriptor() ([]byte, []int) {
	return file_mq_match_match_proto_rawDescGZIP(), []int{5, 0}
}

func (x *MatchResult_MatchedRecord) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *MatchResult_MatchedRecord) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *MatchResult_MatchedRecord) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MatchResult_MatchedRecord) GetMatchSubId() string {
	if x != nil {
		return x.MatchSubId
	}
	return ""
}

func (x *MatchResult_MatchedRecord) GetTaker() *OrderResp {
	if x != nil {
		return x.Taker
	}
	return nil
}

func (x *MatchResult_MatchedRecord) GetMaker() *OrderResp {
	if x != nil {
		return x.Maker
	}
	return nil
}

var File_mq_match_match_proto protoreflect.FileDescriptor

var file_mq_match_match_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x71, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x71,
	0x1a, 0x0f, 0x65, 0x6e, 0x75, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x38,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x71, 0x2e, 0x4e, 0x65, 0x77,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4d, 0x71, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x22, 0x7f, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4d, 0x71, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2e, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x71, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x06, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x22, 0xb9, 0x02, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x74,
	0x79, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x46, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x51, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa7, 0x05, 0x0a, 0x0b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x73, 0x42, 0x75, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x71, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0xc7, 0x01, 0x0a, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x05, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x71, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x05, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4d, 0x71, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x71,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x42,
	0x23, 0x5a, 0x21, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x71, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x3b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mq_match_match_proto_rawDescOnce sync.Once
	file_mq_match_match_proto_rawDescData = file_mq_match_match_proto_rawDesc
)

func file_mq_match_match_proto_rawDescGZIP() []byte {
	file_mq_match_match_proto_rawDescOnce.Do(func() {
		file_mq_match_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_mq_match_match_proto_rawDescData)
	})
	return file_mq_match_match_proto_rawDescData
}

var file_mq_match_match_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_mq_match_match_proto_goTypes = []interface{}{
	(*MatchReq)(nil),                  // 0: commonMq.MatchReq
	(*MatchResp)(nil),                 // 1: commonMq.MatchResp
	(*NewOrderOperate)(nil),           // 2: commonMq.NewOrderOperate
	(*CancelOperate)(nil),             // 3: commonMq.CancelOperate
	(*OrderResp)(nil),                 // 4: commonMq.OrderResp
	(*MatchResult)(nil),               // 5: commonMq.MatchResult
	(*CancelResp)(nil),                // 6: commonMq.CancelResp
	(*MatchResult_MatchedRecord)(nil), // 7: commonMq.MatchResult.MatchedRecord
	(enum.Side)(0),                    // 8: commonEnum.Side
	(enum.OrderType)(0),               // 9: commonEnum.OrderType
	(enum.OrderStatus)(0),             // 10: commonEnum.OrderStatus
}
var file_mq_match_match_proto_depIdxs = []int32{
	2,  // 0: commonMq.MatchReq.new_order:type_name -> commonMq.NewOrderOperate
	3,  // 1: commonMq.MatchReq.cancel:type_name -> commonMq.CancelOperate
	5,  // 2: commonMq.MatchResp.match_result:type_name -> commonMq.MatchResult
	6,  // 3: commonMq.MatchResp.cancel:type_name -> commonMq.CancelResp
	8,  // 4: commonMq.NewOrderOperate.side:type_name -> commonEnum.Side
	9,  // 5: commonMq.NewOrderOperate.order_type:type_name -> commonEnum.OrderType
	8,  // 6: commonMq.CancelOperate.side:type_name -> commonEnum.Side
	9,  // 7: commonMq.CancelOperate.order_type:type_name -> commonEnum.OrderType
	10, // 8: commonMq.OrderResp.order_status:type_name -> commonEnum.OrderStatus
	7,  // 9: commonMq.MatchResult.matched_record:type_name -> commonMq.MatchResult.MatchedRecord
	4,  // 10: commonMq.MatchResult.MatchedRecord.taker:type_name -> commonMq.OrderResp
	4,  // 11: commonMq.MatchResult.MatchedRecord.maker:type_name -> commonMq.OrderResp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_mq_match_match_proto_init() }
func file_mq_match_match_proto_init() {
	if File_mq_match_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mq_match_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mq_match_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mq_match_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrderOperate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mq_match_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOperate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mq_match_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mq_match_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mq_match_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mq_match_match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResult_MatchedRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mq_match_match_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MatchReq_NewOrder)(nil),
		(*MatchReq_Cancel)(nil),
	}
	file_mq_match_match_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MatchResp_MatchResult)(nil),
		(*MatchResp_Cancel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mq_match_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mq_match_match_proto_goTypes,
		DependencyIndexes: file_mq_match_match_proto_depIdxs,
		MessageInfos:      file_mq_match_match_proto_msgTypes,
	}.Build()
	File_mq_match_match_proto = out.File
	file_mq_match_match_proto_rawDesc = nil
	file_mq_match_match_proto_goTypes = nil
	file_mq_match_match_proto_depIdxs = nil
}
